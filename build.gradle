plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id "groovy"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "application"
    id "com.github.ben-manes.versions" version "$gradleVersionsPlugin"
}

version "0.1"
group "finance"

repositories {
    mavenCentral()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kapt("io.micronaut:micronaut-inject-java:${micronautVersion}")
    kapt("io.micronaut:micronaut-validation:${micronautVersion}")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject:${micronautVersion}")
    implementation("io.micronaut:micronaut-validation:${micronautVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime:$micronautRuntimeVersion")
    implementation("io.micronaut:micronaut-runtime:${micronautVersion}")
    implementation("io.micronaut:micronaut-http-server-netty:$micronautVersion")
    implementation("io.micronaut:micronaut-http-client:$micronautVersion")
    implementation("io.micronaut.data:micronaut-data-model:$micronautDataVersion")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion")

    //Validation
    implementation("javax.validation:validation-api:${validationVersion}")
    implementation("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")

    implementation ("javax.el:javax.el-api:2.2.4")
    implementation ("org.apache.logging.log4j:log4j-core:${apacheLoggingVersion}")

    implementation("io.micronaut.micrometer:micronaut-micrometer-core:${micronautVersion}")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-statsd")
    implementation("io.micronaut:micronaut-management:${micronautVersion}")

    //graphics
    implementation("net.coobird:thumbnailator:${thumbnailatorVersion}")

    kapt("io.micronaut.data:micronaut-data-processor:$micronautDataVersion")
    implementation("io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion")

    runtimeOnly("io.micronaut.configuration:micronaut-jdbc-tomcat:${micronautTomcatVersion}")
    runtimeOnly("org.postgresql:postgresql:$postgresqlVersion")

    runtimeOnly("ch.qos.logback:logback-classic:$logbackVersion")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("io.micronaut:micronaut-inject-groovy:${micronautVersion}")
    testImplementation("org.spockframework:spock-core:${spockVersion}") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation('io.micronaut.test:micronaut-test-spock')
}

test.classpath += configurations.developmentOnly

mainClassName = "iot.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

// java {
//     sourceCompatibility = JavaVersion.toVersion('1.8')
// }

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

compileTestKotlin {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

kapt.includeCompileClasspath = false

kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "com.example.*")
        arg("micronaut.processing.group", "com.example")
        arg("micronaut.processing.module", "finance")
    }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

